{{ define "subcommand" }}
package days

import (
	"bufio"
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/cstaaben/go-log"

	"github.com/cstaaben/adventofcode/internal/config"
)

func New{{ KebabToPascal .addDay }}Command() *cobra.Command {
	d := &day{{ KebabToPascal .addDay }}{
        logger: log.New(os.Stderr).WithoutTimestamp().WithoutFile(),
    }

	cmd := &cobra.Command{
		Use: "{{ KebabToLower .addDay }}",
		Run: d.run,
	}

	cmd.Flags().StringP("input_file", "i", "", "Input file for puzzle")
	cmd.Flags().Bool("part_one", false, "Run part one of the day's puzzle")
	cmd.Flags().Bool("part_two", false, "Run part two of the day's puzzle")
	cmd.Flags().BoolP("all", "a", false, "Run all parts of the day's puzzle")

	return cmd
}

type day{{ KebabToPascal .addDay }} struct {
    logger *log.Logger
}

func (d *day{{ KebabToPascal .addDay }}) run(_ *cobra.Command, _ []string) {
	conf, err := config.New()
	if err != nil {
		d.logger.Error("error parsing config:", err)
		return
	}

	if conf.Debug {
		d.logger = d.logger.WithDebug()
	}
	d.logger.Debug("Day {{ KebabToTitle .addDay }}")

	var file *os.File
	file, err = os.Open(conf.InputFile)
	if err != nil {
		d.logger.Error("error opening input file:", err)
		return
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)

	runOne, runTwo := conf.ShouldRun()
	if runOne {
		d.partOne(scanner)
	}
	if runTwo {
		d.partTwo(scanner)
	}
}

func (d *day{{ KebabToPascal .addDay }}) partOne(scanner *bufio.Scanner) {
	d.logger.Debug("----------> Part One")
}

func (d *day{{ KebabToPascal .addDay }}) partTwo(scanner *bufio.Scanner) {
	d.logger.Debug("----------> Part Two")
}

{{ end }}
